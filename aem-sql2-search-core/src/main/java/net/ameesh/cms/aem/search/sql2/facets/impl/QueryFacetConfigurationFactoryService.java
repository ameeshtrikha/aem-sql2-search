package net.ameesh.cms.aem.search.sql2.facets.impl;

import net.akqa.aem.search.sql2.api.facets.QueryFacetConfigurationFactory;
import org.apache.commons.lang3.StringUtils;
import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.ConfigurationPolicy;
import org.apache.felix.scr.annotations.Deactivate;
import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.PropertyUnbounded;
import org.apache.felix.scr.annotations.Service;
import org.apache.jackrabbit.oak.commons.PropertiesUtil;
import org.osgi.service.component.ComponentContext;

import java.util.Dictionary;

/**
 * Created by ameesh.trikha on 2/24/16.
 */
@Component(configurationFactory = true,
        policy = ConfigurationPolicy.REQUIRE, metatype = true, immediate = true)
@Service(value= QueryFacetConfigurationFactory.class)
public class QueryFacetConfigurationFactoryService implements QueryFacetConfigurationFactory {


    private final String PROP_QUERY_PROVIDER_CLASS = "query.queryProvider.class";
    private final String PROP_CONFIGURED_FACETS = "query.configured.facets";

    @Property(name = PROP_QUERY_PROVIDER_CLASS, label = "Class implementing QueryProvider interface")
    private String queryClass;

    @Property(name = PROP_CONFIGURED_FACETS, label = "Facets to be attached to the query generated by this class", unbounded = PropertyUnbounded.ARRAY)
    private String [] facets;

    /**
     * Component life cycle method, this is called with each configuration
     * change and with each bundle deployment.
     *
     * @param context
     *            the ComponentContext
     */
    @Activate
    protected void activate(final ComponentContext context) {
        final Dictionary<?, ?> properties = context.getProperties();
        this.queryClass = PropertiesUtil.toString(
                properties.get(PROP_QUERY_PROVIDER_CLASS), StringUtils.EMPTY);
        this.facets = PropertiesUtil.toStringArray(properties
                .get(PROP_CONFIGURED_FACETS));
    }

    /**
     * Component life cycle method, This method automatically gets invoked
     * whenever bundle is un-deployed or the configurations are changed.
     *
     * @param context
     *            the context
     */
    @Deactivate
    protected void deactivate(final ComponentContext context) {
    }

    public String getQueryClass() {
        return queryClass;
    }

    public String[] getFacets() {
        return facets;
    }
}
